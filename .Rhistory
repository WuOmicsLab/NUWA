library("devtools")
df <- data.frame(x=rep(1:2,5), rnorm(10))
df
df <- data.frame(x=rep(1:2,5), y=rnorm(10))
boxplot(y~x,df)
boxplot(y~x,df, ylab = "fdsagf")
y=c(1,3,5,6,9, 33);
x=c(2,5,8,10,12,22);
lm(y~x)
x=c(1,3,5,6,9, 33);
y=c(2,5,8,10,12,22);
lm(y~x)
6.4709*0.57336
round(6.4709*0.57336,10)
getwd()
matrix(0,6,6)
matrix(0,6,6)->a
trace(a)
tls <- list(a=random.mat(100,100), b=random.mat(80,30)
tls <- list(a=random.mat(100,100), b=random.mat(80,30),
c= random.mat(160, 40), d=random.mat(400,10),e=random.mat(60,10))
res <- buildNetwork(tls, markers = paste0("row", 1:10), ncores = 5)
# test------------------------------
tls <- list(a=random.mat(100,100), b=random.mat(80,30),
c= random.mat(160, 40), d=random.mat(400,10),e=random.mat(60,10))
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
load("data/6trs.rda")
load("data/markers.rda")
load("data/mydata.rda")
tls <- list(a=random.mat(100,100), b=random.mat(80,30),
c= random.mat(160, 40), d=random.mat(400,10),e=random.mat(60,10))
res <- buildNetwork(tls, markers = paste0("row", 1:10), ncores = 5)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/myfun.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/myfun.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/myfun.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/myfun.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/myfun.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/buildNetwork.R', echo=TRUE)
str(res)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/recallAnalysis.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/recallAnalysis.R', encoding = 'UTF-8', echo=TRUE)
recallAnalysis <- function(x, corMethod = c("spearman", "pearson")[1]){
truth.pred=x$predVsTruth
pred=truth.pred[['pred']]
truth=truth.pred[['truth']]
geneIndex=1:nrow(truth)
names(geneIndex)=rownames(truth)
sampleIndex=1:ncol(truth)
names(sampleIndex)=colnames(truth)
rmHighCor <- T
if(rmHighCor){
truth.cor.gene <- sapply(geneIndex, function(x){
xx <- truth[x,]
res <- sapply(geneIndex, function(y){
if (x>=y) return(0) else{
yy <- truth[y,]
return(cor(xx,yy,use='p',method=corMethod))
}
})
})
truth.cor.gene <- truth.cor.gene + t(truth.cor.gene)
}
simNull.cor.gene=sapply(geneIndex, function(x){
xx=truth[x,]
res=sapply(geneIndex,function(y){
if(x==y) {
return(NA)
}else if (rmHighCor && !is.na(truth.cor.gene[x,y]) && truth.cor.gene[x,y]>0.5){
return(NA)
} else{
yy=pred[y,]
return(cor(xx,yy,use='p',method=corMethod))
}
})
})
simNull.cor.sample=sapply(sampleIndex, function(x){
xx=truth[,x]
res=sapply(sampleIndex,function(y){
if(x==y) return(NA) else{
yy=pred[,y]
return(cor(xx,yy,use='p',method=corMethod))
}
})
})
simNull.list=list(Gene=simNull.cor.gene,
Sample=simNull.cor.sample)
df.recall.ls=lapply(c('Gene','Sample'), function(level){
if(level == 'Sample'){
pred0=t(pred)
truth0=t(truth)
}else{
pred0=pred
truth0=truth
}
simNull=simNull.list[[level]]
simNull=as.vector(simNull)
simNull=simNull[!is.na(simNull)]
gs=rownames(pred0)
names(gs)=gs
dfls=lapply(gs,function(g){
x=pred0[g,]
y=truth0[g,]
cor=cor(x,y,use='p',method = corMethod)
pval=sum(simNull>cor)/length(simNull)
recall=1-pval
res=data.frame(g,cor,pval,recall,level)
names(res)=c('sample','cor','pval','recall','level')
return(res)
})
df=do.call(rbind,dfls)
return(df)
})
df.recall=do.call(rbind, df.recall.ls)
rownames(df.recall)=NULL
finalRes=list(
recallTable=df.recall,
simNull=simNull.list,
corMethod=corMethod
)
recallsum(df.recall)
return(finalRes)
}
load('../../gc.rda')
names(res)
a=recallAnalysis(res)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/recallAnalysis.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/recallAnalysis.R', echo=TRUE)
a=recallAnalysis(res)
b=factor(c("fdsag","fddgafgagfga"))
b
unique(b)
as.character(unique(b))
source('D:/Users/xiergo/Desktop/Rpackage/NUWA/R/myfun.R', echo=TRUE)
a=recallAnalysis(res)
devtools::document()
version
devtools::build_manual()
devtools::build_vignettes()
devtools::document()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::build_manual()
?recallAnalysis
devtools::build()
devtools::build_manual()
devtools::build_manual(pkg = "../NUWA/")
getwd()
?devtools::build_manual
setwd("../")
devtools::build_manual()
setwd("NUWA/")
devtools::document()
?NUWAeDeconv
devtools::document()
?NUWAeDeconv
?NUWAms
str(EPIC::BRef)
devtools::install_github('dviraran/xCell')
install.packages("glue")
install.packages("glue")
library(glue)
library(RCurl)
install.packages("RCurl")
remotes::install_github('dviraran/xCell')
library("xCell")
str(xCell::xCell.data)
names(xCell.data)
length(xCell.data$signatures)
length(xCell.data$signatures[1])
length(xCell.data$signatures[[1]])
a=unlist(xCell.data$signatures)
a[[1]]
b=a[[1]]
remotes::install_github("ebecht/MCPcounter")
install_github("ebecht/MCPcounter",ref="master", subdir="Source")
devtools::install_github("ebecht/MCPcounter",ref="master", subdir="Source")
genes=read.table(curl:::curl("https://raw.githubusercontent.com/ebecht/MCPcounter/master/Signatures/genes.txt"),sep="\t",stringsAsFactors=FALSE,header=TRUE,colClasses="character",check.names=FALSE)
genes=read.table(curl:::curl("https://raw.githubusercontent.com/ebecht/MCPcounter/master/Signatures/genes.txt"),sep="\t",stringsAsFactors=FALSE,header=TRUE,colClasses="character",check.names=FALSE)
head(genes)
mcpcounter_marker_list <- split(genes$`HUGO symbols`, genes$`Cell population`)
str(mcpcounter_marker_list)
save(mcpcounter_marker_list, file = "data/mcpcounter_marker_list.rda")
devtools::document()
unlist(xCell.data$signatures)
unlist(unlist(xCell.data$signatures))
a=lapply(unlist(xCell.data$signatures), function(x) x$geneIds)
a=lapply(unlist(xCell.data$signatures), function(x) x@geneIds)
a=lapply(xCell.data$signatures, function(x) x@geneIds)
str(a)[1:10]
load("data/mydata.rda")
LM22=lm22
LM6=lm6
BCIC=EPIC::BRef$refProfiles
mar=union(EPIC::BRef$sigGenes, EPIC::TRef$sigGenes)
BCIC=EPIC::BRef$refProfiles[mar,]
TIC=EPIC::TRef$refProfiles[mar,]
save(LM6,LM22,BCIC, TIC,files="data/signature_matrix.rda")
save(LM6,LM22,BCIC, TIC,files="data/signature_matrix.rda")
save(LM6,LM22,BCIC, TIC,file="data/signature_matrix.rda")
devtools::document()
devtools::document()
devtools::build()
devtools::build_manual()
?barplotCF
devtools::document()
?barplotCF
?boxplotCF
?buildNetwork
devtools::document()
devtools::build_manual()
?buildNetwork
?NUWA.cibersort
?NUWA.EPIC
?NUWA.EPIC
?NUWA.mcpcounter
?NUWA.xcel
?NUWA.xcell
?NUWA.eDeconv
?NUWAeDeconv
?NUWEms
?NUWAms
?recall.plot
?recall
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::build_manual()
tinytex::tlmgr_install("makeindex")
install.packages("tinytex")
install.packages("tinytex")
devtools::document()
devtools::build_manual()
tinytex::tlmgr_install("makeindex")
devtools::build_manual()
devtools::build()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::build()
devtools::document()
