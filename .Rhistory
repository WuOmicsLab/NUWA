expr_impute <- res$finalExpr
print(str(expr))
print(str(expr_impute))
print(str(res))
predVsTruth <- res$predVsTruth
ref <- list(refProfiles = signature_matrix, sigGenes = rownames(signature_matrix))
prop <- EPIC::EPIC(expr_impute, ref)
return(list(proportion = prop, mixture_impute = expr_impute, predVsTruth = predVsTruth))
}
res_epic=NUWA.EPIC(expr[,1:2], signature_matrix = TIC)
dim(expr)
ex1=expr[,1:2]
sum(rowSums(is.na(ex1))==2)
sum(rowSums(is.na(ex1))==1)
sum(rowSums(is.na(ex1))==0)
devtools::document()
rm("NUWA.EPIC")
devtools::document()
res_epic=NUWA.EPIC(expr[,1:2], signature_matrix = TIC)
devtools::document()
res_epic=NUWA.EPIC(expr[,1:2], signature_matrix = TIC)
load("xie.rda")
dim(expr.final)
a=expr.final[!apply(is.na(expr.final),1,all),, drop = F]
dim(a)
sum(!apply(is.na(expr.final),1,all))
expr.final[apply(is.na(expr.final),1,all),][1:10,]
ex1[1:2,]
expr=expr[,-1]
head(expr[,1:2])
ex1=expr[,1:2]
table(rowSums(is.na(ex1)))
devtools::document()
res_epic=NUWA.EPIC(expr[,1:2], signature_matrix = TIC)
devtools::document()
res_ciber <- NUWA.cibersort(ex1)
res_ciber <- NUWA.cibersort(ex1, signature_matrix = LM6)
res_ciber <- NUWA.cibersort(ex1, signature_matrix = LM6, cibersortPath = 'xie.rda')
res_edeconv <- NUWAeDeconv(ex1, cibersortPath = 'xie.rda')
res_nuwaCiber <- NUWA.cibersort(
expr = ex1,
signature_matrix= LM22,
cibersortPath='xie.rda'
)
xcell.data
res_xcell <- NUWA.xcell(ex1)
devtools::document()
res_xcell <- NUWA.xcell(ex1)
prop <- xCell::xCellAnalysis(ex1, signatures = xCell::xCell.data$signatures,
genes = rownames(expr_impute))
prop <- xCell::xCellAnalysis(ex1, signatures = xCell::xCell.data$signatures,
genes = rownames(ex1))
prop <- xCell::xCellAnalysis(ex1, signatures = xCell::xCell.data$signatures,
genes = rownames(ex1))
a=xCell::xCell.data$signatures
prop <- xCell::xCellAnalysis(ex1, signatures = a,
genes = rownames(ex1))
devtools::document()
prop <- xCell::xCellAnalysis(ex1, signatures = a,
genes = rownames(ex1))
library(xCell)
prop <- xCell::xCellAnalysis(ex1, signatures = a,
genes = rownames(ex1))
prop
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build_manual()
devtools::build()
xs <- seq(10,0,1)
?seq
xs <- seq(0, 1, length.out = 100)
theta <- 2
for (k in 0 : (theta - 1)) {
print(k)
}
e
exp(1)
cumprod(3)
cumprod(1:3)
3!
prod(3)
factorial(3)
plot(lambdas, p_sees, lty = 1)
source('~/.active-rstudio-document', echo=TRUE)
plot(lambdas, p_sees, lty = 1, type = 'l')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(c(0,300), c(0, 1), ann = 'n')
plot(c(0,300), c(0, 1), ann = 'n', type = 'n')
f=function(x) (x-min(x))/(max(x)-min(x))*99+1
f(c(2.1,99))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
devtools::document()
devtools::build()
data = c(23.5,	0,
24.1,	0,
37.1,	0,
37.6,	4,
58.5,	12,
58.6,	18,
91,	54,
92.9,	44,
141.9,	94,
148.6,	94,
221.3,	100,
239.3,	100)
data
theta <- 1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data = c(23.5,	0,
24.1,	0,
37.1,	0,
37.6,	4,
58.5,	12,
58.6,	18,
91,	54,
92.9,	44,
141.9,	94,
148.6,	94,
221.3,	100,
239.3,	100)
source('~/.active-rstudio-document', echo=TRUE)
data = c(23.5,	0,
24.1,	0,
37.1,	0,
37.6,	4,
58.5,	12,
58.6,	18,
91,	54,
92.9,	44,
141.9,	94,
148.6,	94,
221.3,	100,
239.3,	100)
x <- data[1:12*2-1]
y <- data[1:12]
lambdas <- seq(0, 250, length.out = 1000)
alpha <- 0.1
plot(c(x, y, xlab = "lambda", ylab = "P_see")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("../生物物理化学/")
ls
ls()
list.files()
dir.create("lesson1")
setwd("lesson1/")
sample(c(-1,1) 10)
sample(c(-1,1), 10)
sample(c(-1,1), 10, replace = R)
sample(c(-1,1), 10, replace = T)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
par('usr')
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
?text
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
?sample
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
source('D:/Users/xiergo/Desktop/NUWA/R/6randomwalk_a.R', echo=TRUE)
devtools::build()
devtools::document()
devtools::build()
?kruskal.test
dim(matrix(1:12,3))
library(ggplot2)
ggplot(1)+geom_point()
ggplot(data.frame(x=1:3,y=1:3))+geom_point()
ggplot(data.frame(x=1:3,y=1:3),mapping = aes(x,y))+geom_point()
ggplot(data.frame(x=1:3,y=1:3),mapping = aes(x,y))+geom_point()+labs(xlab=expression(paste("self cor", rho)))
ggplot(data.frame(x=1:3,y=1:3),mapping = aes(x,y))+geom_point()+labs(xlab=expression(paste("self cor", rho)))
ggplot(data.frame(x=1:3,y=1:3),mapping = aes(x,y))+geom_point()+labs(x=expression(paste("self cor", rho)))
ggplot(data.frame(x=1:3,y=1:3),mapping = aes(x,y))+geom_point()+labs(x=expression(paste("self cor ", rho)))
a='gdsaf'
ggplot(data.frame(x=1:3,y=1:3),mapping = aes(x,y))+geom_point()+labs(x=expression(paste(a, rho)))
devtools::document()
devtools::build()
devtools::build_manual()
?barplot
?barplotCF
devtools::document()
devtools::build_manual()
devtools::build()
devtools::document()
devtools::build()
1477%%365
1530%%365
NUWAms
devtools::document()
check_ciber
cibersort()
CIBERSORT
ls()
cibersort()
devtools::document()
check_cibersort()
check_cibersort
CIBERSORT
source('../check_cibersort.R')
rm(list=ls())
source('../check_cibersort.R')
save(check_cibersort, CIBERSORT, CoreAlg, doPerm, file = 'data/func.rda')
rm(list = ls())
load('data/func.rda')
devtools::document()
devtools::document()
rm(list = ls())
check_cibersort
devtools::build()
devtools::build_manual()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::build_manual()
load('../nuwams.brca.rda')
recall.plot(res,'marker')
recall.plot(res,'marker',axis.text.x = element_text(size = 10))
source('D:/Users/xiergo/Desktop/NUWA/R/recall.plot.R', echo=TRUE)
recall.plot(res,'marker')
recall.plot(res,'marker',axis.text.x = element_text(size = 10))
?modifyList
source('D:/Users/xiergo/Desktop/NUWA/R/recall.plot.R', echo=TRUE)
recall.plot(res,'marker',axis.text.x = element_text(size = 2))
recall.plot(res,'marker',axis.text.x = element_text(size = 20))
source('../check_cibersort.R')
save(check_cibersort, CIBERSORT, CoreAlg, doPerm, file = 'data/func.rda')
devtools::document()
rm(list = ls())
devtools::document()
devtools::build_manual()
devtools::build()
devtools::document()
load('../s186_median_scale.LM22.Gender.cf.rda')
str(promat)
barplotCF(promat,groupInfo = groupInfo)
barplotCF(promat,groupInfo = groupinfo)
promat[1,]
t(promat[1,])
t(t(promat[1,]))
#' @export
#'
#' @examples
#' promat <- runif(10 * 7,min = 0, max = 1)
#' promat <- matrix(promat, nrow = 10)
#' promat <- promat / rowSums(promat)
#' rownames(promat) <- paste0("sample_", 1:10)
#' colnames(promat) <- paste0("ct_", 1:7)
#' groupinfo <- sample(paste0('Group_', letters[1:3]), 10, replace = T)
#' barplotCF(promat, groupInfo = groupinfo)
barplotCF <- function(mat, groupInfo = NULL, ctCol = NULL) {
if (!is.matrix(mat)) {
stop("mat should be a matrix")
}
if(is.null(rownames(mat))|is.null(colnames(mat))) {
stop("rownames or colnames of 'mat' should not be null")
}
if (length(groupInfo) != nrow(mat)) {
stop("The length of 'groupInfo' should be the same with the number of samples included in 'mat'")
}
if(any(mat < 0 | is.na(mat))){
warning('Automatically remove samples with NAs or negative numbers!')
keepind <- rowSums(mat < 0 | is.na(mat))==0
mat <- mat[keepind,,drop=F]
if (identical(names(groupInfo), NULL)) {
groupInfo <- groupInfo[keepind]
}
}
if(any(colSums(mat)==0)) {
mat <- mat[,colSums(mat)>0,drop=F]
warning("Remove cell types that equal zero across all samples, including:\n",colnames(mat)[colSums(mat)==0])
}
res <- mat / rowSums(mat)
if (is.null(groupInfo)) {
groupInfo <- rep("", nrow(res))
}
if (!(is.vector(groupInfo) | is.factor(groupInfo))) {
stop("Parameter 'groupInfo' should be given as a vector or factor")
}
samids <- rownames(res)
if (is.factor(groupInfo)) levs <- levels(groupInfo) else levs <- unique(groupInfo)
if (!identical(names(groupInfo), NULL)) {
if (any(duplicated(names(groupInfo)))) {
stop("The names of groupInfo should be unique")
}
ind <- match(names(groupInfo), samids)
if (any(is.na(ind))) {
stop("The names of groupInfo should be the same with sample ids in 'mat'")
}
groupInfo <- groupInfo[match(samids, names(groupInfo))]
}
df <- data.frame(Sample = rownames(res), Group = groupInfo, res)
df$Sample=factor(df$Sample,levels = rownames(res))
df <- reshape2::melt(df, id = c("Sample", "Group"), variable.name = "celltype")
df$Group <- factor(df$Group, levels = levs)
df$celltype <- factor(df$celltype, levels = colnames(res))
if (is.null(ctCol)) {
if (ncol(res)==6) {
ctCol <- c("#709770", "#71E945", "#CCE744", "#DCA8A1", "#6BDFDC", "#D4D3D5")
} else {
ctCol <- rainbow(ncol(res))
}
}
# ct.labs <- c("B", "CD4", "CD8", "NK", "Mono/Macro", "Neutro")
ct.labs <- colnames(res)
p <- ggplot2::ggplot(mapping = ggplot2::aes(x = Sample, fill = celltype, y = value), data = df) +
ggplot2::geom_col(position = "stack") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 270, hjust = 0, vjust = 0.5),
# strip.text.x = element_text(size = 7),
strip.background.x = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
plot.background = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()
) +
ggplot2::xlab("") +
ggplot2::ylab("Fraction") +
ggplot2::scale_fill_manual(name = NULL, values = ctCol, labels = ct.labs) +
ggplot2::facet_grid(~Group, scales = "free_x", space = "free_x") +
ggplot2::scale_y_continuous(expand = c(0, 0), limits = c(0, 1.005))
print(p)
}
barplotCF(promat,groupInfo = groupinfo)
colSums(promat)==0
mat=promat
groupInfo=groupinfo
ctCol=NULL
if (!is.matrix(mat)) {
stop("mat should be a matrix")
}
if(is.null(rownames(mat))|is.null(colnames(mat))) {
stop("rownames or colnames of 'mat' should not be null")
}
if (length(groupInfo) != nrow(mat)) {
stop("The length of 'groupInfo' should be the same with the number of samples included in 'mat'")
}
if(any(mat < 0 | is.na(mat))){
warning('Automatically remove samples with NAs or negative numbers!')
keepind <- rowSums(mat < 0 | is.na(mat))==0
mat <- mat[keepind,,drop=F]
if (identical(names(groupInfo), NULL)) {
groupInfo <- groupInfo[keepind]
}
}
if(any(colSums(mat)==0)) {
mat <- mat[,colSums(mat)>0,drop=F]
warning("Remove cell types that equal zero across all samples, including:\n",colnames(mat)[colSums(mat)==0])
}
res <- mat / rowSums(mat)
if (is.null(groupInfo)) {
groupInfo <- rep("", nrow(res))
}
if (!(is.vector(groupInfo) | is.factor(groupInfo))) {
stop("Parameter 'groupInfo' should be given as a vector or factor")
}
samids <- rownames(res)
if (is.factor(groupInfo)) levs <- levels(groupInfo) else levs <- unique(groupInfo)
if (!identical(names(groupInfo), NULL)) {
if (any(duplicated(names(groupInfo)))) {
stop("The names of groupInfo should be unique")
}
ind <- match(names(groupInfo), samids)
if (any(is.na(ind))) {
stop("The names of groupInfo should be the same with sample ids in 'mat'")
}
groupInfo <- groupInfo[match(samids, names(groupInfo))]
}
dim(res)
df <- data.frame(Sample = rownames(res), Group = groupInfo, res)
dim(df)
levs
df$Sample=factor(df$Sample,levels = rownames(res))
df <- reshape2::melt(df, id = c("Sample", "Group"), variable.name = "celltype")
df$Group <- factor(df$Group, levels = levs)
df$celltype <- factor(df$celltype, levels = colnames(res))
df$celltype
colnames(res)
df <- data.frame(Sample = rownames(res), Group = groupInfo, res)
df$Sample=factor(df$Sample,levels = rownames(res))
df <- reshape2::melt(df, id = c("Sample", "Group"), variable.name = "celltype")
df$Group <- factor(df$Group, levels = levs)
head(df)
str(res)
df <- data.frame(Sample = rownames(res), Group = groupInfo, res)
head(df)
?data.frame
#' @export
#'
#' @examples
#' promat <- runif(10 * 7,min = 0, max = 1)
#' promat <- matrix(promat, nrow = 10)
#' promat <- promat / rowSums(promat)
#' rownames(promat) <- paste0("sample_", 1:10)
#' colnames(promat) <- paste0("ct_", 1:7)
#' groupinfo <- sample(paste0('Group_', letters[1:3]), 10, replace = T)
#' barplotCF(promat, groupInfo = groupinfo)
barplotCF <- function(mat, groupInfo = NULL, ctCol = NULL) {
if (!is.matrix(mat)) {
stop("mat should be a matrix")
}
if(is.null(rownames(mat))|is.null(colnames(mat))) {
stop("rownames or colnames of 'mat' should not be null")
}
if (length(groupInfo) != nrow(mat)) {
stop("The length of 'groupInfo' should be the same with the number of samples included in 'mat'")
}
if(any(mat < 0 | is.na(mat))){
warning('Automatically remove samples with NAs or negative numbers!')
keepind <- rowSums(mat < 0 | is.na(mat))==0
mat <- mat[keepind,,drop=F]
if (identical(names(groupInfo), NULL)) {
groupInfo <- groupInfo[keepind]
}
}
if(any(colSums(mat)==0)) {
mat <- mat[,colSums(mat)>0,drop=F]
warning("Remove cell types that equal zero across all samples, including:\n",colnames(mat)[colSums(mat)==0])
}
res <- mat / rowSums(mat)
if (is.null(groupInfo)) {
groupInfo <- rep("", nrow(res))
}
if (!(is.vector(groupInfo) | is.factor(groupInfo))) {
stop("Parameter 'groupInfo' should be given as a vector or factor")
}
samids <- rownames(res)
if (is.factor(groupInfo)) levs <- levels(groupInfo) else levs <- unique(groupInfo)
if (!identical(names(groupInfo), NULL)) {
if (any(duplicated(names(groupInfo)))) {
stop("The names of groupInfo should be unique")
}
ind <- match(names(groupInfo), samids)
if (any(is.na(ind))) {
stop("The names of groupInfo should be the same with sample ids in 'mat'")
}
groupInfo <- groupInfo[match(samids, names(groupInfo))]
}
df <- data.frame(Sample = rownames(res), Group = groupInfo, res,check.names = F)
df$Sample=factor(df$Sample,levels = rownames(res))
df <- reshape2::melt(df, id = c("Sample", "Group"), variable.name = "celltype")
df$Group <- factor(df$Group, levels = levs)
df$celltype <- factor(df$celltype, levels = colnames(res))
if (is.null(ctCol)) {
if (ncol(res)==6) {
ctCol <- c("#709770", "#71E945", "#CCE744", "#DCA8A1", "#6BDFDC", "#D4D3D5")
} else {
ctCol <- rainbow(ncol(res))
}
}
# ct.labs <- c("B", "CD4", "CD8", "NK", "Mono/Macro", "Neutro")
ct.labs <- colnames(res)
p <- ggplot2::ggplot(mapping = ggplot2::aes(x = Sample, fill = celltype, y = value), data = df) +
ggplot2::geom_col(position = "stack") +
ggplot2::theme(
axis.text.x = ggplot2::element_text(angle = 270, hjust = 0, vjust = 0.5),
# strip.text.x = element_text(size = 7),
strip.background.x = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
plot.background = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank()
) +
ggplot2::xlab("") +
ggplot2::ylab("Fraction") +
ggplot2::scale_fill_manual(name = NULL, values = ctCol, labels = ct.labs) +
ggplot2::facet_grid(~Group, scales = "free_x", space = "free_x") +
ggplot2::scale_y_continuous(expand = c(0, 0), limits = c(0, 1.005))
print(p)
}
barplotCF(promat,groupInfo=groupinfo)
devtools::document()
rm(list = ls())
devtools::document()
devtools::build()
10^-1.3
564509.88*0.7
564509.88*0.3
169353/20
564509.88*0.3/20
remove.packages('NUWA')
devtools::install_github('WuOmicsLab/NUWA')
?install
?devtools::install
?remotes::install
?modifyList
devtools::document()
devtools::document()
devtools::build_manual()
devtools::document()
